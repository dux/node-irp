// Generated by CoffeeScript 1.7.1
(function() {
  var CacheImage, ResizeRequest, app, easy_image, express, fs, l, md5, mkdirp, port, request, webshot;

  express = require("express");

  easy_image = require("easyimage");

  fs = require("fs");

  md5 = require("md5").digest_s;

  request = require("request");

  mkdirp = require('mkdirp');

  webshot = require('webshot');

  l = function(data) {
    return console.log(data);
  };

  CacheImage = (function() {
    CacheImage.content_type = {
      jpg: 'image/jpeg',
      jpeg: 'image/jpeg',
      gif: 'image/gif',
      png: 'image/png',
      js: 'text/javascript'
    };

    function CacheImage(url, size, quality, type) {
      var path;
      this.url = url;
      this.size = size;
      this.quality = quality;
      this.type = type;
      path = this.url.toLowerCase().split('/');
      path.shift();
      path.shift();
      this.domain = path.shift().replace(/www\./, '');
      this.domain = "" + this.domain[0] + "/" + this.domain;
      this.file_name = path.join('/').replace(/[^\w\.]+/g, "_");
      this.ext = this.file_name.split('.').reverse()[0];
      this.file_name = "" + (md5(this.file_name)) + "." + this.ext;
      this.cached_dir = "cache/ori/" + this.domain;
      this.cached_file = "" + this.cached_dir + "/" + this.file_name;
      this.resized_dir = "cache/res/" + this.domain + "/" + this.type + "/" + this.size + "-" + this.quality;
      this.resized_file = "" + this.resized_dir + "/" + this.file_name;
      this.start = Date.now();
    }

    return CacheImage;

  })();

  ResizeRequest = (function() {
    function ResizeRequest(req, res, type) {
      var encoding, err, opts, qs;
      this.req = req;
      this.res = res;
      this.type = type;
      opts = this.req.path.split("/");
      qs = this.req.query;
      if (opts[2]) {
        qs.size = opts[2];
        qs.source = new Buffer(opts.reverse()[0].split(".")[0], encoding = "Base64").toString("ascii");
      } else {
        qs.source || (qs.source = qs.src || qs.image);
      }
      if (qs.page) {
        qs.is_page = true;
        qs.source = qs.page;
      }
      if (!qs.source) {
        return res.send(500, "<h3>Source not defined</h3>");
      }
      if (!/https?:\/\//.test(qs.source)) {
        return res.send(500, "<h3>BAD URL</h3><p>No http or https prefix on <b>" + qs.source + "</b></p>");
      }
      qs.q || (qs.q = 80);
      if (qs.is_page) {
        this.req.query.gravity = 'North';
        this.image || (this.image = new CacheImage(qs.source + '/shot.jpg', qs.size, qs.q, this.type));
        this.image.is_page = true;
        if (fs.existsSync(this.image.cached_file)) {
          return this.when_we_have_original_image();
        }
        mkdirp(this.image.cached_dir);
        webshot(qs.source, this.image.cached_file, {
          screenSize: {
            width: 1024,
            height: 768
          },
          userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36'
        }, (function(_this) {
          return function(err) {
            var exec;
            if (!fs.existsSync(_this.image.cached_file)) {
              exec = require('child_process').exec;
              exec("curl -o '" + _this.image.cached_file + "' 'http://free.pagepeeker.com/v2/thumbs.php?size=l&url=" + (qs.source.replace(/https?:\/\//, '').replace(/www\./, '')) + "'");
              return _this.res.redirect("http://free.pagepeeker.com/v2/thumbs.php?size=l&url=" + qs.source);
            }
            return _this.when_we_have_original_image();
          };
        })(this));
        return;
      }
      this.image || (this.image = new CacheImage(qs.source, qs.size, qs.q, this.type));
      if (this.req.headers['cache-control'] === 'no-cache' && fs.existsSync(this.image.resized_file)) {
        fs.unlinkSync(this.image.resized_file);
      }
      if (this.type !== 'copy' && fs.existsSync(this.image.resized_file)) {
        return this.deliver_resized_image();
      } else {
        if (fs.existsSync(this.image.cached_file)) {
          return this.when_we_have_original_image();
        } else {
          try {
            req = request({
              url: qs.source
            });
            req.on("response", (function(_this) {
              return function(resp) {
                if (resp.statusCode === 200) {
                  mkdirp(_this.image.cached_dir);
                  return req.pipe(fs.createWriteStream(_this.image.cached_file));
                } else {
                  console.log("Error: Code: " + resp.statusCode);
                  return console.log("Invalid File");
                }
              };
            })(this));
            req.on("end", (function(_this) {
              return function() {
                return _this.when_we_have_original_image();
              };
            })(this));
          } catch (_error) {
            err = _error;
            this.res.send(500, {}, "Error: " + err + ", probably bad URL (" + qs.source + ")");
            return;
          }
        }
      }
    }

    ResizeRequest.prototype.write_in_browser = function(local_path) {
      if (CacheImage.content_type[this.image.ext]) {
        this.res.set({
          'Content-Type': CacheImage.content_type[this.image.ext]
        });
      }
      this.res.set({
        'Cache-control': "public, max-age=10000000, no-transform"
      });
      this.res.set({
        'ETag': md5(local_path)
      });
      this.res.set('Expires', new Date(Date.now() + 10000000).toUTCString());
      return fs.createReadStream(local_path).pipe(this.res);
    };

    ResizeRequest.prototype.when_we_have_original_image = function() {
      var opts, parts;
      if (fs.existsSync(this.image.resized_file)) {
        return this.deliver_resized_image();
      }
      if (this.type === 'copy') {
        return this.write_in_browser(this.image.cached_file);
      }
      mkdirp(this.image.resized_dir);
      opts = {
        type: this.image.ext,
        fill: true,
        quality: this.image.quality,
        src: this.image.cached_file,
        dst: this.image.resized_file
      };
      parts = this.image.size.split('x');
      opts.width = parts[0];
      if (parts[1]) {
        opts.height = parts[1];
      }
      if (this.type === 'fit') {
        opts.height || (opts.height = opts.width);
        opts.gravity = this.req.query.gravity;
        return easy_image.rescrop(opts, (function(_this) {
          return function(err, img) {
            if (err) {
              if (_this.image.is_page) {
                if (fs.existsSync(_this.image.cached_file)) {
                  fs.unlinkSync(_this.image.cached_file);
                }
                if (fs.existsSync(_this.image.resized_file)) {
                  fs.unlinkSync(_this.image.resized_file);
                }
              }
              return _this.res.send(500, "ERROR: " + err);
            }
            return _this.deliver_resized_image();
          };
        })(this));
      } else {
        return easy_image.resize(opts, (function(_this) {
          return function(err, img) {
            if (err) {
              return _this.res.send(500, "ERROR: " + err);
            }
            return _this.deliver_resized_image();
          };
        })(this));
      }
    };

    ResizeRequest.prototype.deliver_resized_image = function() {
      var time_to_convert;
      time_to_convert = Date.now() - this.image.start;
      console.log("" + time_to_convert + " ms for " + this.image.url + " to " + this.image.resized_file);
      return this.write_in_browser(this.image.resized_file);
    };

    return ResizeRequest;

  })();

  app = express();

  app.set("title", "NodeIRP");

  app.get("/", function(req, res) {
    return res.send("<p>hakeru!!!<p>");
  });

  app.get('/favicon.ico', function(req, res) {
    return res.send('');
  });

  app.get("/width*", function(req, res) {
    return new ResizeRequest(req, res, 'resize');
  });

  app.get("/resize*", function(req, res) {
    return new ResizeRequest(req, res, 'resize');
  });

  app.get("/fit*", function(req, res) {
    return new ResizeRequest(req, res, 'fit');
  });

  app.get("/copy*", function(req, res) {
    return new ResizeRequest(req, res, 'copy');
  });

  port = 4000;

  app.listen(port);

  console.log("NodeIRP started on port " + port);

}).call(this);
